{"version":3,"sources":["components/Button.js","components/Header.js","components/CheckButton.js","components/Task.js","components/Tasks.js","components/AddTask.js","controllers/controller.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","onClick","className","style","color","text","backgroundColor","defaultProps","Header","toggleShowAddTask","showAddTask","CheckButton","toggleCheck","taskID","checked","Task","task","onDelete","_id","done","title","body","Tasks","tasks","map","AddTask","onAdd","useState","setTitle","setBody","setDone","onSubmit","e","preventDefault","alert","htmlFor","type","value","onChange","target","placeholder","currentTarget","name","addTaskController","a","fetch","method","cors","headers","JSON","stringify","res","status","require","config","App","setShowAddTask","setTasks","render","setRender","useEffect","getData","json","data","console","log","addTask","deleteTask","id","then","filter","length","arr","obj","find","indexOf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44b1dd84.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = (props) => {\r\n    const onClick = () => {\r\n        // console.log('clicked')\r\n        props.onClick()\r\n    }\r\n    return <button onClick={onClick} className='btn' style={style(props.color)}>{props.text}</button>\r\n}\r\n\r\nconst style = (color) => {\r\n    return {\r\n        backgroundColor: color\r\n    }\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'black',\r\n    text: 'button'\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    color: PropTypes.string,\r\n    onClick: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default Button","import PropTypes from 'prop-types'\r\nimport Button from './Button'\r\n\r\nconst Header = ({toggleShowAddTask, showAddTask}) => {\r\n    const onClick = () => {\r\n        toggleShowAddTask()\r\n    }\r\n\r\n    return (\r\n        <header className='header'>\r\n\r\n            {/*<h1 style={headingStyle}> task tracker {props.title}</h1>*/}\r\n            <h1>task tracker</h1>\r\n            <Button color={!showAddTask ? 'green' : 'red'} text={!showAddTask ? 'Add' : 'Close'} onClick={onClick}/>\r\n\r\n            {/*<Button />*/}\r\n            {/*<Button color={'green'} text={'Hello2'}/>*/}\r\n            {/*<Button color={'green'} text={'Hello3'}/>*/}\r\n        </header>\r\n    )\r\n}\r\n\r\n// const headingStyle = {\r\n//     color: \"cadetblue\",\r\n//     backgroundColor: \"black\",\r\n//\r\n// }\r\nHeader.propTypes = {\r\n    title: PropTypes.string\r\n}\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport Button from './Button'\r\n\r\nconst CheckButton = ({toggleCheck, taskID, checked}) => {\r\n\r\n    return (\r\n        <Button onClick={() => toggleCheck(taskID)} text={checked ? 'ðŸ‘Œ' : 'ðŸ‘Ž'}/>\r\n    )\r\n}\r\n\r\nexport default CheckButton","import {FaTimes} from 'react-icons/fa'\r\nimport CheckButton from './CheckButton'\r\n\r\nconst Task = ({task, onDelete, toggleCheck}) => {\r\n    return (\r\n        <div className={\"task\"}>\r\n            {/*need to create arrow func because only function ref was passed down*/}\r\n            <CheckButton toggleCheck={toggleCheck} taskID={task._id} checked={task.done}/>\r\n            <div className=\"todotask\">\r\n                <h3>{task.title} <FaTimes onClick={() => onDelete(task._id)} style={{color: \"red\"}}/></h3>\r\n                <p>{task.body}</p>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task","import Task from './Task'\r\n// import PropTypes from 'prop-types'\r\n\r\n//to display everything in the list\r\nconst Tasks = ({tasks, onDelete, toggleCheck}) => {\r\n\r\n    return (\r\n        <>\r\n            {tasks.map((task) => (<Task key={task._id} task={task} onDelete={onDelete} toggleCheck={toggleCheck}/>))}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n// Tasks.propTypes = {\r\n//     key: PropTypes.\r\n// }\r\n\r\nexport default Tasks","import {useState} from 'react'\r\n\r\n\r\nconst AddTask = ({onAdd}) => {\r\n    const [title, setTitle] = useState('')\r\n    const [body, setBody] = useState('')\r\n    const [done, setDone] = useState(false)\r\n\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        if (!title) {\r\n            alert('Enter a title')\r\n            return\r\n        }\r\n        onAdd({title, body, done})\r\n    }\r\n\r\n    return (\r\n        <form className={'add-form'} onSubmit={submitForm}>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"\">Title</label>\r\n                <input type=\"text\" value={title} onChange={(e) => setTitle(e.target.value)}/>\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"\">Task</label>\r\n                <input type=\"text\" placeholder={'description'} onChange={(e) => setBody(e.target.value)} value={body}/>\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"\">Status</label>\r\n                <input type=\"checkbox\" onChange={(e) => setDone(e.currentTarget.checked)} checked={done}/>\r\n            </div>\r\n            <input type=\"submit\" name=\"\" className=\"btn btn-block\" value={'Add Task'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTask","const addTaskController = async (task) => {\n    // let status\n    // fetch('/tasks', {\n    //     method: 'POST',\n    //     cors: 'same-origin',\n    //     headers: {\n    //         'Origin': `/`,\n    //         'Content-Type': 'application/json'\n    //     },\n    //     body: JSON.stringify(task)\n    // }).then(res => {\n    //     res.json()\n    //     console.log(res.status)\n    //     status = res.status\n    // }).then(data => {\n    //     // console.log('data: ', data.message)\n    //\n    //     // setTasks([...tasks, task])\n    //     // setRender(!render)\n    // }).catch(err => {\n    //     console.log('error in controller: ', err)\n    // })\n    // console.log('status', status)\n    // return status === 200\n    const res = await fetch('/tasks', {\n        method: 'POST',\n        cors: 'same-origin',\n        headers: {\n            'Origin': `/`,\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(task)\n    })\n    return res.status === 200\n    // const data = await res.json()\n}\n\nconst updateTaskController = async (task) => {\n    fetch('/tasks', {\n        method: 'PUT',\n        cors: 'same-origin',\n        headers: {\n            'Origin': '/',\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify(task)\n    })\n\n}\n\nexport {addTaskController}","import React, {useEffect, useState} from \"react\"\r\nimport './index.css'\r\nimport Header from './components/Header'\r\nimport Tasks from './components/Tasks'\r\nimport AddTask from \"./components/AddTask\"\r\nimport Button from \"./components/Button\"\r\nimport {addTaskController} from \"./controllers/controller\"\r\n\r\nrequire('dotenv').config()\r\n\r\n\r\nfunction App() {\r\n    const [showAddTask, setShowAddTask] = useState(false)\r\n    //tasks is now available globally\r\n    const [tasks, setTasks] = useState([])\r\n    //variable to update the DOM, sometimes does it twice, too bad\r\n    const [render, setRender] = useState(false)\r\n\r\n    useEffect(async () => {\r\n        const getData = async () => {\r\n            try {\r\n\r\n                const res = await fetch(`/tasks`, {\r\n                    method: 'GET',\r\n                    cors: 'same-origin',\r\n                    headers: {\r\n                        'Origin': `/`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                })\r\n                const data = await res.json()\r\n                console.log(data)\r\n                setTasks([...data])\r\n            } catch (e) {\r\n                console.log('json error')\r\n                console.log(e)\r\n            }\r\n        }\r\n\r\n        await getData()\r\n    }, [render])\r\n\r\n    const toggleShowAddTask = () => setShowAddTask(!showAddTask)\r\n\r\n    const addTask = async (task) => {\r\n        console.log(tasks)\r\n        let addTask = await addTaskController(task)\r\n        console.log('addTaskController', addTask)\r\n        if (addTask === true) {\r\n        \tsetTasks([...tasks, task])\r\n        \tsetRender(!render)\r\n            console.log('rendered')\r\n        } else {\r\n            console.log('did not render')\r\n        }\r\n\r\n\r\n        // fetch('/tasks', {\r\n        //     method: 'POST',\r\n        //     cors: 'same-origin',\r\n        //     headers: {\r\n        //         'Origin': `/`,\r\n        //         'Content-Type': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify(task)\r\n        // }).then(res => {\r\n        //     res.json()\r\n        //     console.log(res.status)\r\n        // }).then(data => {\r\n        //     console.log(data.statusCode)\r\n        //     console.log(data.message)\r\n        //     setTasks([...tasks, task])\r\n        //     setRender(!render)\r\n        // }).catch(err => {\r\n        //     console.log(err)\r\n        // })\r\n\r\n    }\r\n\r\n    //deletes the task\r\n    const deleteTask = async (id) => {\r\n\r\n        fetch('/tasks', {\r\n            method: 'DELETE',\r\n            cors: 'same-origin',\r\n            headers: {\r\n                'Origin': `/`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({_id: id})\r\n        }).then(res => {\r\n            res.json()\r\n        }).then(data => {\r\n            console.log(data)\r\n            setRender(!render)\r\n        })\r\n\r\n        console.log('deleted ', id)\r\n        setTasks(tasks.filter((task) => {\r\n            return task._id !== id\r\n        }))\r\n    }\r\n\r\n    const taskToggleCheckbox = (id) => {\r\n        let arr = [...tasks]\r\n        let obj = tasks.find((task) => {\r\n            // task._id === id ? console.log(task) : ''\r\n            return task._id === id\r\n        })\r\n        arr[tasks.indexOf(obj)].done = !arr[tasks.indexOf(obj)].done\r\n        setTasks(arr)\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Header title='hello' toggleShowAddTask={toggleShowAddTask} showAddTask={showAddTask}/>\r\n            {/*{<AddTask onAdd={addTask}/>}*/}\r\n            {showAddTask ? (<AddTask onAdd={addTask}/>) : ''}\r\n            {tasks.length > 0 ? (<Tasks tasks={tasks} onDelete={deleteTask} toggleCheck={taskToggleCheckbox}/>) : (\r\n                <p>No tasks</p>)}\r\n            {/*{getData()}*/}\r\n            <Button onClick={() => console.log('clicked')}/>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}